name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push CPU Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # 优化构建参数
          provenance: false
          sbom: false

      - name: Extract GPU metadata
        id: gpu-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-gpu
            type=ref,event=pr,suffix=-gpu
            type=semver,pattern={{version}},suffix=-gpu
            type=semver,pattern={{major}}.{{minor}},suffix=-gpu
            type=semver,pattern={{major}},suffix=-gpu
            type=raw,value=latest-gpu,enable={{is_default_branch}}

      - name: Build and push GPU Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.gpu
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.gpu-meta.outputs.tags }}
          labels: ${{ steps.gpu-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # 优化构建参数
          provenance: false
          sbom: false

  test-image:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Pull and test image
        run: |
          # 拉取镜像
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # 启动容器进行测试
          docker run -d --name mixtex-test -p 8000:8000 \
            -e MODEL_PATH=/app/model \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # 等待容器启动
          sleep 30
          
          # 健康检查
          curl -f http://localhost:8000/health || exit 1
          
          # 清理
          docker stop mixtex-test
          docker rm mixtex-test

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
